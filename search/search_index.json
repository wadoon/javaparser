{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JML Parser \u00b6 This project provides a library for the parsing of Java with the Java Modelling Language (JML). JML is a formal specification for Java to decribe the functional behavior, e.g., pre- and post-conditions of methods, class and loop invariants. The bases of this project is the [Java Parser] https://github.com/javaparser/javaparser ) project, which is extended in the following ways: new lexer and grammar rules new AST classes and also new attributes for Block , WhileStatement , ForStatement , DoStatement , and CallableDeclaration (constructors and methods). (TODO) extension of the name resolution JML AST Classes \u00b6 Behavior Jmlish JmlLogicType JmlStatement JmlStmtWithExpression JmlUnreachableStmt JmlGhostStatements JmlSetStmt JmlRefiningStmt JmlName JmlClassLevel JmlRepresentsDeclaration JmlFieldDeclaration JmlClassAccessibleDeclaration ClassInvariantClause LocationSetExpression LocationSetPrimary LocationSetLiftExpression LocationSetArrayAccess LocationSetBindingExpr LocationSetFunction LocationSetFieldAccess JmlClause JmlClauseE CapturesClause SignalsClause OldClause JmlClauseHL DurationClause SignalsOnlyClause JmlClauseHE CallableClause JmlClauseLE ForallClause JmlContract JmlContainer JmlBodyDeclaration JmlContracts JmlSetComprehension JmlStatements","title":"JML Parser"},{"location":"#jml-parser","text":"This project provides a library for the parsing of Java with the Java Modelling Language (JML). JML is a formal specification for Java to decribe the functional behavior, e.g., pre- and post-conditions of methods, class and loop invariants. The bases of this project is the [Java Parser] https://github.com/javaparser/javaparser ) project, which is extended in the following ways: new lexer and grammar rules new AST classes and also new attributes for Block , WhileStatement , ForStatement , DoStatement , and CallableDeclaration (constructors and methods). (TODO) extension of the name resolution","title":"JML Parser"},{"location":"#jml-ast-classes","text":"Behavior Jmlish JmlLogicType JmlStatement JmlStmtWithExpression JmlUnreachableStmt JmlGhostStatements JmlSetStmt JmlRefiningStmt JmlName JmlClassLevel JmlRepresentsDeclaration JmlFieldDeclaration JmlClassAccessibleDeclaration ClassInvariantClause LocationSetExpression LocationSetPrimary LocationSetLiftExpression LocationSetArrayAccess LocationSetBindingExpr LocationSetFunction LocationSetFieldAccess JmlClause JmlClauseE CapturesClause SignalsClause OldClause JmlClauseHL DurationClause SignalsOnlyClause JmlClauseHE CallableClause JmlClauseLE ForallClause JmlContract JmlContainer JmlBodyDeclaration JmlContracts JmlSetComprehension JmlStatements","title":"JML AST Classes"},{"location":"devel/","text":"Development of JML Parser \u00b6 How To Compile Sources \u00b6 If you checked out the project from GitHub you can build the project with maven using: mvn clean install If you checkout the sources and want to view the project in an IDE, it is best to first generate some of the source files; otherwise you will get many compilation complaints in the IDE. (mvn clean install already does this for you.) mvn javacc:javacc Extending the AST \u00b6 If you modify the code of the AST nodes, specifically if you add or remove fields or node classes, the code generators will update a lot of code for you. The run_metamodel_generator.sh script will rebuild the metamodel, which is used by the code generators which are run by run_core_generators.sh Make sure that javaparser-core at least compiles before you run these. Note : for Eclipse IDE follow the steps described in the wiki: https://github.com/javaparser/javaparser/wiki/Eclipse-Project-Setup-Guide","title":"Development of JML Parser"},{"location":"devel/#development-of-jml-parser","text":"","title":"Development of JML Parser"},{"location":"devel/#how-to-compile-sources","text":"If you checked out the project from GitHub you can build the project with maven using: mvn clean install If you checkout the sources and want to view the project in an IDE, it is best to first generate some of the source files; otherwise you will get many compilation complaints in the IDE. (mvn clean install already does this for you.) mvn javacc:javacc","title":"How To Compile Sources"},{"location":"devel/#extending-the-ast","text":"If you modify the code of the AST nodes, specifically if you add or remove fields or node classes, the code generators will update a lot of code for you. The run_metamodel_generator.sh script will rebuild the metamodel, which is used by the code generators which are run by run_core_generators.sh Make sure that javaparser-core at least compiles before you run these. Note : for Eclipse IDE follow the steps described in the wiki: https://github.com/javaparser/javaparser/wiki/Eclipse-Project-Setup-Guide","title":"Extending the AST"}]}